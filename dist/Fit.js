"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ProtocolVersion_1 = __importDefault(require("./ProtocolVersion"));
class Fit {
}
Fit.debug = false;
Fit.PROTOCOL_VERSION = ProtocolVersion_1.default.getHighestVersion().getVersion();
Fit.PROTOCOL_VERSION_MAJOR_SHIFT = 4;
Fit.PROTOCOL_VERSION_MAJOR_MASK = 0x0f << Fit.PROTOCOL_VERSION_MAJOR_SHIFT;
Fit.PROTOCOL_VERSION_MINOR_MASK = 0x0f;
Fit.PROTOCOL_VERSION_MAJOR = ProtocolVersion_1.default.getHighestVersion().getMajor();
Fit.PROTOCOL_VERSION_MINOR = ProtocolVersion_1.default.getHighestVersion().getMinor();
Fit.PROFILE_VERSION_MAJOR = 21;
Fit.PROFILE_VERSION_MINOR = 115;
Fit.PROFILE_TYPE = 'Release';
Fit.PROFILE_VERSION_SCALE = 1000;
Fit.PROFILE_VERSION = Fit.PROFILE_VERSION_MAJOR * Fit.PROFILE_VERSION_SCALE +
    Fit.PROFILE_VERSION_MINOR;
Fit.ANTFS_FILE_DATA_TYPE = 128;
Fit.FILE_HDR_SIZE = 14;
Fit.HDR_SIZE = 1;
Fit.HDR_TIME_REC_BIT = 0x80;
Fit.HDR_TIME_TYPE_MASK = 0x60;
Fit.HDR_TIME_TYPE_SHIFT = 5;
Fit.HDR_TIME_OFFSET_MASK = 0x1f;
Fit.HDR_TYPE_DEF_BIT = 0x40;
Fit.HDR_DEV_FIELDS_BIT = 0x20;
Fit.HDR_TYPE_MASK = 0x0f;
Fit.MAX_LOCAL_MESGS = Fit.HDR_TYPE_MASK + 1;
Fit.CRC_SIZE = 2;
Fit.MAX_MESG_SIZE = 65535;
Fit.ARCH_ENDIAN_MASK = 0x01;
Fit.ARCH_ENDIAN_LITTLE = 0;
Fit.ARCH_ENDIAN_BIG = 1;
Fit.MAX_FIELD_SIZE = 255;
Fit.FIELD_NUM_INVALID = 255;
Fit.FIELD_NUM_MESSAGE_INDEX = 254;
Fit.FIELD_NUM_TIMESTAMP = 253;
Fit.FIELD_DEFAULT_SCALE = 1;
Fit.FIELD_DEFAULT_OFFSET = 0;
Fit.SUBFIELD_INDEX_ACTIVE_SUBFIELD = 65534;
Fit.SUBFIELD_INDEX_MAIN_FIELD = 65535;
Fit.SUBFIELD_NAME_MAIN_FIELD = '';
Fit.BASE_TYPE_ENDIAN_FLAG = 0x80;
Fit.BASE_TYPE_RESERVED = 0x60;
Fit.BASE_TYPE_NUM_MASK = 0x1f;
Fit.ENUM_MAX = 0xff;
Fit.ENUM_MIN = 0x00;
Fit.ENUM_INVALID = 0xff;
Fit.BASE_TYPE_ENUM = 0x00;
Fit.SINT8_MAX = 0x7f;
Fit.SINT8_MIN = -0x80;
Fit.SINT8_INVALID = 0x7f;
Fit.BASE_TYPE_SINT8 = 0x01;
Fit.UINT8_MAX = 0xff;
Fit.UINT8_MIN = 0x00;
Fit.UINT8_INVALID = 0xff;
Fit.BASE_TYPE_UINT8 = 0x02;
Fit.SINT16_MAX = 0x7fff;
Fit.SINT16_MIN = -0x8000;
Fit.SINT16_INVALID = 0x7fff;
Fit.BASE_TYPE_SINT16 = 0x83;
Fit.UINT16_MAX = 0xffff;
Fit.UINT16_MIN = 0x0000;
Fit.UINT16_INVALID = 0xffff;
Fit.BASE_TYPE_UINT16 = 0x84;
Fit.SINT32_MAX = 0x7fffffff;
Fit.SINT32_MIN = -0x80000000;
Fit.SINT32_INVALID = 0x7fffffff;
Fit.BASE_TYPE_SINT32 = 0x85;
Fit.UINT32_MAX = 0xffffffff;
Fit.UINT32_MIN = 0x00000000;
Fit.UINT32_INVALID = 0xffffffff;
Fit.BASE_TYPE_UINT32 = 0x86;
Fit.STRING_INVALID = '';
Fit.BASE_TYPE_STRING = 0x07;
Fit.STRING_MAX_BYTE_COUNT = Fit.MAX_FIELD_SIZE - 1; // Reserve 1 byte for the null terminator that is appended to all strings during encoding
Fit.FLOAT32_INVALID = Number.NaN;
Fit.FLOAT32_MAX = Number.MAX_VALUE;
Fit.FLOAT32_MIN = -Number.MAX_VALUE;
Fit.BASE_TYPE_FLOAT32 = 0x88;
Fit.FLOAT64_INVALID = Number.NaN;
Fit.FLOAT64_MAX = Number.MAX_VALUE;
Fit.FLOAT64_MIN = -Number.MAX_VALUE;
Fit.BASE_TYPE_FLOAT64 = 0x89;
Fit.UINT8Z_MAX = 0xff;
Fit.UINT8Z_MIN = 0x00;
Fit.UINT8Z_INVALID = 0x00;
Fit.BASE_TYPE_UINT8Z = 0x0a;
Fit.UINT16Z_MAX = 0xffff;
Fit.UINT16Z_MIN = 0x0000;
Fit.UINT16Z_INVALID = 0x0000;
Fit.BASE_TYPE_UINT16Z = 0x8b;
Fit.UINT32Z_MAX = 0xffffffff;
Fit.UINT32Z_MIN = 0x00000000;
Fit.UINT32Z_INVALID = 0x00000000;
Fit.BASE_TYPE_UINT32Z = 0x8c;
Fit.BYTE_MAX = 0xff;
Fit.BYTE_MIN = 0x00;
Fit.BYTE_INVALID = 0xff;
Fit.BASE_TYPE_BYTE = 0x0d;
Fit.SINT64_MAX = BigInt('0x7fffffffffffffff');
Fit.SINT64_MIN = -BigInt('0x8000000000000000');
Fit.SINT64_INVALID = BigInt('0x7fffffffffffffff');
Fit.BASE_TYPE_SINT64 = 0x8e;
Fit.UINT64_MAX = BigInt('0xFFFFFFFFFFFFFFFF');
Fit.UINT64_MIN = BigInt('0x0000000000000000');
Fit.UINT64_INVALID = BigInt('0xFFFFFFFFFFFFFFFF');
Fit.BASE_TYPE_UINT64 = 0x8f;
Fit.UINT64Z_MAX = BigInt('0xFFFFFFFFFFFFFFFF');
Fit.UINT64Z_MIN = BigInt('0x0000000000000000');
Fit.UINT64Z_INVALID = BigInt('0x0000000000000000');
Fit.BASE_TYPE_UINT64Z = 0x90;
Fit.BASE_TYPES = 17;
Fit.baseTypeSizes = [
    1, 1, 1, 2, 2, 4, 4, 1, 4, 8, 1, 2, 4, 1, 8, 8, 8,
];
Fit.UTF8_BOM_BYTE_1 = 0xef;
Fit.UTF8_BOM_BYTE_2 = 0xbb;
Fit.UTF8_BOM_BYTE_3 = 0xbf;
Fit.UTF8_BOM_BYTES = [
    Fit.UTF8_BOM_BYTE_1,
    Fit.UTF8_BOM_BYTE_2,
    Fit.UTF8_BOM_BYTE_3,
];
Fit.UTF8_NUM_BOM_BYTES = 3;
Fit.UTF8_BOM = '\uFEFF';
// This flag enables deprecated behaviour in the SDK.
//
// As of 16.10:
//
//    If a get method is used on a field containing invalid
//    values, null is returned. When disabled, an appropriate
//    invalid value is returned instead.
Fit.ENABLE_LEGACY_BEHAVIOUR = true;
Fit.baseTypeInvalidMap = new Map([
    [Fit.BASE_TYPE_ENUM, Fit.ENUM_INVALID],
    [Fit.BASE_TYPE_SINT8, Fit.SINT8_INVALID],
    [Fit.BASE_TYPE_UINT8, Fit.UINT8_INVALID],
    [Fit.BASE_TYPE_SINT16, Fit.SINT16_INVALID],
    [Fit.BASE_TYPE_UINT16, Fit.UINT16_INVALID],
    [Fit.BASE_TYPE_SINT32, Fit.SINT32_INVALID],
    [Fit.BASE_TYPE_UINT32, Fit.UINT32_INVALID],
    [Fit.BASE_TYPE_STRING, Fit.STRING_INVALID],
    [Fit.BASE_TYPE_FLOAT32, Fit.FLOAT32_INVALID],
    [Fit.BASE_TYPE_FLOAT64, Fit.FLOAT64_INVALID],
    [Fit.BASE_TYPE_UINT8Z, Fit.UINT8Z_INVALID],
    [Fit.BASE_TYPE_UINT16Z, Fit.UINT16Z_INVALID],
    [Fit.BASE_TYPE_UINT32Z, Fit.UINT32Z_INVALID],
    [Fit.BASE_TYPE_BYTE, Fit.BYTE_INVALID],
    [Fit.BASE_TYPE_SINT64, Fit.SINT64_INVALID],
    [Fit.BASE_TYPE_UINT64, Fit.UINT64_INVALID],
    [Fit.BASE_TYPE_UINT64Z, Fit.UINT64Z_INVALID],
]);
Fit.baseTypeMinMap = new Map([
    [Fit.BASE_TYPE_ENUM, Fit.ENUM_MIN],
    [Fit.BASE_TYPE_SINT8, Fit.SINT8_MIN],
    [Fit.BASE_TYPE_UINT8, Fit.UINT8_MIN],
    [Fit.BASE_TYPE_SINT16, Fit.SINT16_MIN],
    [Fit.BASE_TYPE_UINT16, Fit.UINT16_MIN],
    [Fit.BASE_TYPE_SINT32, Fit.SINT32_MIN],
    [Fit.BASE_TYPE_UINT32, Fit.UINT32_MIN],
    [Fit.BASE_TYPE_FLOAT32, Fit.FLOAT32_MIN],
    [Fit.BASE_TYPE_FLOAT64, Fit.FLOAT64_MIN],
    [Fit.BASE_TYPE_UINT8Z, Fit.UINT8Z_MIN],
    [Fit.BASE_TYPE_UINT16Z, Fit.UINT16Z_MIN],
    [Fit.BASE_TYPE_UINT32Z, Fit.UINT32Z_MIN],
    [Fit.BASE_TYPE_BYTE, Fit.BYTE_MIN],
    [Fit.BASE_TYPE_SINT64, Fit.SINT64_MIN],
    [Fit.BASE_TYPE_UINT64, Fit.UINT64_MIN],
    [Fit.BASE_TYPE_UINT64Z, Fit.UINT64Z_MIN],
]);
Fit.baseTypeMaxMap = new Map([
    [Fit.BASE_TYPE_ENUM, Fit.ENUM_MAX],
    [Fit.BASE_TYPE_SINT8, Fit.SINT8_MAX],
    [Fit.BASE_TYPE_UINT8, Fit.UINT8_MAX],
    [Fit.BASE_TYPE_SINT16, Fit.SINT16_MAX],
    [Fit.BASE_TYPE_UINT16, Fit.UINT16_MAX],
    [Fit.BASE_TYPE_SINT32, Fit.SINT32_MAX],
    [Fit.BASE_TYPE_UINT32, Fit.UINT32_MAX],
    // [Fit.BASE_TYPE_STRING, Fit.STRING_MAX],
    [Fit.BASE_TYPE_FLOAT32, Fit.FLOAT32_MAX],
    [Fit.BASE_TYPE_FLOAT64, Fit.FLOAT64_MAX],
    [Fit.BASE_TYPE_UINT8Z, Fit.UINT8Z_MAX],
    [Fit.BASE_TYPE_UINT16Z, Fit.UINT16Z_MAX],
    [Fit.BASE_TYPE_UINT32Z, Fit.UINT32Z_MAX],
    [Fit.BASE_TYPE_BYTE, Fit.BYTE_MAX],
    [Fit.BASE_TYPE_SINT64, Fit.SINT64_MAX],
    [Fit.BASE_TYPE_UINT64, Fit.UINT64_MAX],
    [Fit.BASE_TYPE_UINT64Z, Fit.UINT64Z_MAX],
]);
exports.default = Fit;
